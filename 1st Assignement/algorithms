% Τεχνικες Βελτιστοποιησης Ασκηση 1

clear all;
clear; clf;
% Κανοντας uncomment μια απο τις γραμμες 12-16, προκυπτει
% η χρηση του καθε αλγοριθμου και αλλαζοντας το ορισμα βλεπουμε
% τα αποτελεσματα για τις 3 αντικειμενικες συναρτησεις
syms x
f1(x) =  (x-2)^2 + x*log(x+3);
f2(x) =  5^x + (2-cos(x)^2);
f3(x) =  (exp(x))*(x^3 - 1) + (x-1)*sin(x);
%[y1, y2] = Bisection(f3); % μεθοδος διχοτομου για διαφορα ε
%[y3, y4] = Bisection2(f3); % μεθοδος διχοτομου για διαφορα l
[y5, y6] = GoldenSec(f3); % μεθοδος χρυσου τομεα
%[y7, y8] = Fibonacci(f3); % μεθοδος fibonacci
%[y9, y10] = BisecDif(f3); % μεθοδος διχοτομου με χρηση παραγωγων

function  [y1, y2] = Bisection(f) % constant l, d changes
    l=0.01;
    d = 0.001*l; % βαζω το ε συναρτησει το l
    k=100; % μεγιστος αριθμος επαναληψεων (δεν φτανει ποτε εκει)
    bins = 0; %αριθμος επαναληψεων που τερματιζει ο αλγοριθμος
    for j = 1 : 495; % επαναληψη για διαφορετικα ε συμφωνα με τον περιορισμο ε < l/2
         a = -1; 
         b = 3 ;
         ak(1)=a; % πινακας με τα ak 
         bk(1)=b;  % πινακας με τα bk        
         d = d + 0.001*l;
         for i=1: k % k επαναληψεις
             if j ==5
                   ak(i) = a; %αποθηκευω το ak για συγκεκριμενο l
                   bk(i) = b; %αποθηκευω το βk για συγκεκριμενο l
                   bins = i;
             end
             if (b-a)<l  % ελεγχω αν βρηκα το διαστημα
                y1(1, j) = a; % κατω ακρο διαστηματος για συγκεκριμενο ε
                y2(1, j) = b; % ανω ακρο διαστηματος για συγκεκριμενο ε
                break;
             else
                x1 = (a+b)/2 - d; % βρισκω x1
                x2 = (a+b)/2 + d;   % βρισκω χ2
                if (f(x1) < f(x2))  % ελεγχω ποιο δινει μεγαλυτερη τιμη στη
                    b= x2;          % συναρτηση και δημιουργω το νεο 
                   
                else                % διαστημα
                    a = x1;
                    
                end

             end

         end
    end
    figure(9)
    x1 = 0.001*l : 0.001*l : 0.495*l; 
    plot(x1,y1, x1 , y2);
     figure(10)
      x2 = 1 : 1 : bins;
     plot(x2, ak, 'rx', x2 , bk, 'bx');
    
    
end


function  [y1, y2] = Bisection2(f) % constant ε, l changes
    d=0.001;
    k=100;
    l = 0; 
    bins = 0; %Ομοιως με πριν
    for j = 1 : 100; % επαναληψη για 100 διαφορετικα l
         a = -1; 
         b = 3;
         ak(1)=a; 
         bk(1)=b;          
         l = l + 0.01; % l που επιλεγω σε καθε επαναληψη
         for i=1: k % k επαναληψεις
             if j ==5
                  ak(i) = a; %Ομοιως με πριν
                  bk(i) = b;
                  bins = i; % τελικος αριθμος επαναληψεων πριν τεραμτισει
             end

             if (b-a)<l  % ελεγχω αν βρηκα το διαστημα
                y1(1, j) = a; % κατω ακρο διαστηματος για συγκεκριμενο l
                y2(1, j) = b; % ανω ακρο διαστηματος για συγκεκριμενο l
                break;
             else
                x1 = (a+b)/2 - d; % βρισκω x1
                x2 = (a+b)/2 + d;   % βρισκω χ2
                if (f(x1) < f(x2))  % ελεγχω ποιο δινει μεγαλυτερη τιμη στη
                    b= x2;          % συναρτηση και δημιουργω το νεο 
                else                % διαστημα
                    a = x1;
                end

             end

         end
    end
    figure(1)
    x1 = 0.01 : 0.01 : 1;
    plot(x1,y1, x1 , y2);
     figure(2)
      x2 = 1 : 1 : bins;
     plot(x2, ak, 'rx', x2 , bk, 'bx');
    
    end



 function [y1, y2] = GoldenSec(f)
    k=100;
    l = 0; 
    for j = 1 : 100; % επαναληψη για 100 διαφορετικα l
         a = -1; 
         b = 3;
         g = 0.618;
         l = l + 0.01; % l που επιλεγω σε καθε επαναληψη
         x1 = a + (1-g)*(b-a); % αρχικοποιω x1
         x2 = a + g*(b-a); % αρχικοποιω x2
         for i=1: k % k επαναληψεις
             if j ==5
                 ak(i) = a;
                 bk(i) = b;
                 bins = i;
             end
             if (b-a)<l  % ελεγχω αν βρηκα το διαστημα
                 y1(1, j) = a; % κατω ακρο διαστηματος για συγκεκριμενο l
                 y2(1, j) = b; % ανω ακρο διαστηματος για συγκεκριμενο l
                break;
             else
                if (f(x1) < f(x2))  
                    b = x2;          
                    x2 = x1;        
                    x1 = a + (1-g)*(b-a);
                else               
                    a = x1;
                    x1 = x2;
                    x2 = a + g*(b-a);
                    
                end
             end
         end
    end
    figure(3)
    x1 = 0.01 : 0.01 : 1;
    plot(x1,y1, x1 , y2);

    figure(4)
    x2 = 1 : 1 : bins;
    plot(x2, ak, 'rx', x2 , bk, 'bx');
 end


 function [y1, y2] = Fibonacci(f)
    d = 0.001;
    l = 0; 
    bins = 0;
    for j = 1 : 100; % επαναληψη για 100 διαφορετικα l
         a = -1; 
         b = 3;
         k = 100;
         n = 0;
         l = l + 0.01; % l που επιλεγω σε καθε επαναληψη
         for i = 1 : 100
             if fibonacci(i) > (b-a)/l % Βρισκω Fn
                 Fn = fibonacci(i);
                 n = i; % βρισκω το n
                 break;
             end
         end
         x1 = a + (fibonacci(n-2) / fibonacci(n)) * (b -a);
         x2 = a + (fibonacci(n-1) / fibonacci(n)) * (b -a);
         for i= 1 : k
             if j ==5
                 ak(i) = a; %πινακας ak για συγκεκριμενο l
                 bk(i) = b;
                 bins = i;
             end
             if (i == n-2) %ελεγχος τερματισμου αλγοριθμου
                x2 = x1 + d;
                if (f(x1) > f(x2))
                    a = x1;
                else
                    b = x2;
                end
                 y1(1, j) = a; % κατω ακρο διαστηματος για συγκεκριμενο l
                 y2(1, j) = b; % ανω ακρο διαστηματος για συγκεκριμενο l
                 break;
            else
                if( f(x1) > f(x2))
                    a = x1;               
                    x1 = x2;
                    x2 = a + (fibonacci(n-i-1) / fibonacci(n-i) ) * (b-a);
                else
                    b = x2;
                    x2 = x1;
                    x1 = a + (fibonacci(n-i-2) / fibonacci(n-i) ) * (b-a);
                end
            end
         

         end
         
    end
    figure(5)
    x1 = 0.01 : 0.01 : 1;
    plot(x1,y1, x1 , y2);

    figure(6)
    x2 = 1 : 1 : bins;
    plot(x2, ak, 'rx', x2 , bk, 'bx');
 end


 function [y1, y2] = BisecDif(f)
         l= 0;
     for j = 1 : 100; % επαναληψη για 100 διαφορετικα l
         a = -1; 
         b = 3;
         k = 100;
         l = l + 0.01;
         n = 0;
         for i = 1 : 1000
             if (1/2)^i <= l/(b-a) % Βρισκω το n
                 n = i;
                 break;
             end
         end

         for i=1: k
             x = (a+b)/2; % αρχικοποιω xk
             xDiff = diff(f); % υπολογιζω την παραγωγο της συναρτησης
             X = xDiff(x); % υπολογιζω την τιμη της παραγωγου στο xk
             if j ==5
                 ak(i) = a; % Ομοιως με πριν
                 bk(i) = b;
                 bins = i;
             end
             if ( X == 0) % Δεν συμβαινει ποτε
                 y1(1, j) = x; % κατω ακρο διαστηματος για συγκεκριμενο l
                 y2(1, j) = x; % ανω ακρο διαστηματος για συγκεκριμενο l
                 break;
             else
                 if  (X > 0)
                     b = x;
                 else
                     a = x;
                 end
             end
            if (i == n )
                y1(1, j) = a; % κατω ακρο διαστηματος για συγκεκριμενο l
                y2(1, j) = b; % ανω ακρο διαστηματος για συγκεκριμενο l
                break;
            end
         end

      end
     
    figure(7)
    x1 = 0.01 : 0.01 : 1;
    plot(x1,y1, x1 , y2);

    figure(8)
    x2 = 1 : 1 : bins;
    plot(x2, ak, 'rx', x2 , bk, 'bx');

 end

 
